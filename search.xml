<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Leduk规则说明</title>
    <url>/2020/03/19/Leduk%E8%A7%84%E5%88%99%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<p>Leduc Hold’em is a toy poker game sometimes used in academic research(first introduced in <a href="http://poker.cs.ualberta.ca/publications/UAI05.pdf" target="_blank" rel="noopener">Bayes’ Bluff: Opponent Modeling in Poker</a>). </p>
<p>简单来说，Leduk就是简化的德州扑克游戏。他的全称是heads-up no-limit Leduk，即单挑无限注扑克游戏。 </p>
<a id="more"></a>

<p>It is played with a deck of six cards, comprising two suits of three ranks each (often the king, queen, and jack - in our implementation, the ace, king, and queen). The game begins with each player being dealt one card privately, followed by a betting round. Then, another card is dealt faceup as a community (or board) card, and there is another betting round. Finally, the players reveal their private cards. If one player’s private card is the same rank as the board card, he or she wins the game; otherwise, the player whose private card has the higher rank wins.</p>
<p>这个游戏经常用于学术研究中，一副牌有六张：有两套三个等级的卡片：国王、王后和杰克。游戏开始后，每个玩家会获得一张私牌，然后进行一轮下注。之后，再讲另一张牌作为公牌放在桌面上，进行另一轮下注。最后，玩家展示他们的私牌，若一个玩家的私牌和公牌相同，他（她）获胜（因为每种牌只有两张，这里就不会平局）；否则，私牌牌面更高的玩家获胜。</p>
<p>The game that we implement is No-Limit Leduc Hold’em, meaning that whenever a player makes a bet, he or she may wager any amount of chips up to a maximum of that player’s remaining stack. There is also no limit on the number of bets and raises that can be made in each betting round.</p>
<p>这个游戏是无限注德州扑克，这意味着每当玩家下注时，他或她都可以下注任何数量的筹码，直到该玩家剩余筹码的最大值。 每一轮下注和加注的次数也没有限制。</p>
]]></content>
      <categories>
        <category>德州扑克</category>
      </categories>
  </entry>
  <entry>
    <title>Torch框架学习（一）</title>
    <url>/2020/03/19/torch%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<p>Torch is a scientific computing framework with wide support for machine learning algorithms that puts GPUs first. It is easy to use and efficient, thanks to an easy and fast scripting language, LuaJIT, and an underlying C/CUDA implementation.</p>
<p>Torch是一个可用于深度学习的计算框架，支持GPU；得益于简单快速的脚本语言，LuaJIT和底层C / CUDA实现，它易于使用且高效。</p>
<a id="more"></a>

<p>The goal of Torch is to have maximum flexibility and speed in building your scientific algorithms while making the process extremely simple. Torch comes with a large ecosystem of community-driven packages in machine learning, computer vision, signal processing, parallel processing, image, video, audio and networking among others, and builds on top of the Lua community.</p>
<p>At the heart of Torch are the popular neural network and optimization libraries which are simple to use, while having maximum flexibility in implementing complex neural network topologies. You can build arbitrary graphs of neural networks, and parallelize them over CPUs and GPUs in an efficient manner.</p>
<p>Torch基于lua社区，其核心是易于使用的流行神经网络库和优化库，并且易于并行。</p>
<p>简单地介绍一下Lua: Because Torch is based on Lua and runs on Lua-JIT(just-in-time complier) which is fast.</p>
<ul>
<li><p>Lua is pretty close to javascript.</p>
</li>
<li><p>Only has one data structure built-in, a table: <code>{}</code>. Doubles as a hash-table and an array. 只有一种内置的数据结构</p>
</li>
<li><p>1-based indexing.</p>
<p>这里说明一下循环的写法，和python有些不一样： –代表注释</p>
<p>#(*) 代表长度</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for i&#x3D;1,#b do -- the # operator is the length operator in Lua</span><br><span class="line">    print(b[i]) </span><br><span class="line">end</span><br></pre></td></tr></table></figure>

<p>关于torch如何构造张量Tensor</p>
]]></content>
      <categories>
        <category>Torch</category>
      </categories>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/03/19/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
